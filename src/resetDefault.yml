- key: escape escape
  command: -workbench.action.exitZenMode
  when: inZenMode
- key: ctrl+l
  command: -expandLineSelection
  when: textInputFocus
- key: ctrl+y
  command: -redo
- key: f12
  command: -goToNextReference
  when: inReferenceSearchEditor || referenceSearchVisible
- key: f4
  command: -goToNextReference
  when: inReferenceSearchEditor || referenceSearchVisible
- key: shift+f12
  command: -goToPreviousReference
  when: inReferenceSearchEditor || referenceSearchVisible
- key: shift+f4
  command: -goToPreviousReference
  when: inReferenceSearchEditor || referenceSearchVisible
- key: ctrl+u
  command: -cursorUndo
  when: textInputFocus
- key: ctrl+k ctrl+c
  command: -editor.action.addCommentLine
  when: editorTextFocus && !editorReadonly
- key: ctrl+d
  command: -editor.action.addSelectionToNextFindMatch
  when: editorFocus
- key: shift+alt+oem_period
  command: -editor.action.autoFix
  when: textInputFocus && !editorReadonly && supportedCodeAction =~ /(\s|^)quickfix\b/
- key: shift+alt+a
  command: -editor.action.blockComment
  when: editorTextFocus && !editorReadonly
- key: ctrl+f2
  command: -editor.action.changeAll
  when: editorTextFocus && !editorReadonly
- key: ctrl+insert
  command: -editor.action.clipboardCopyAction
- key: shift+insert
  command: -editor.action.clipboardPasteAction
- key: ctrl+oem_2
  command: -editor.action.commentLine
  when: editorTextFocus && !editorReadonly
- key: ctrl+shift+k
  command: -editor.action.deleteLines
  when: textInputFocus && !editorReadonly
- key: f7
  command: -editor.action.diffReview.next
  when: isInDiffEditor
- key: shift+f7
  command: -editor.action.diffReview.prev
  when: isInDiffEditor
- key: alt+f3
  command: -editor.action.dirtydiff.next
  when: editorTextFocus && !textCompareEditorActive
- key: shift+alt+f3
  command: -editor.action.dirtydiff.previous
  when: editorTextFocus && !textCompareEditorActive
- key: shift+alt+f
  command: -editor.action.formatDocument
  when: editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor
- key: shift+alt+f
  command: -editor.action.formatDocument.none
  when: editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly
- key: ctrl+k ctrl+f
  command: -editor.action.formatSelection
  when: editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly
- key: ctrl+f12
  command: -editor.action.goToImplementation
  when: editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor
- key: shift+f12
  command: -editor.action.goToReferences
  when: editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor
- key: ctrl+shift+oem_period
  command: -editor.action.inPlaceReplace.down
  when: editorTextFocus && !editorReadonly
- key: ctrl+shift+oem_comma
  command: -editor.action.inPlaceReplace.up
  when: editorTextFocus && !editorReadonly
- key: ctrl+oem_6
  command: -editor.action.indentLines
  when: editorTextFocus && !editorReadonly
- key: alt+oem_6
  command: -editor.action.inlineSuggest.showNext
  when: inlineSuggestionVisible && !editorReadonly
- key: alt+oem_4
  command: -editor.action.inlineSuggest.showPrevious
  when: inlineSuggestionVisible && !editorReadonly
- key: shift+alt+i
  command: -editor.action.insertCursorAtEndOfEachLineSelected
  when: editorTextFocus
- key: ctrl+shift+oem_5
  command: -editor.action.jumpToBracket
  when: editorTextFocus
- key: ctrl+shift+f2
  command: -editor.action.linkedEditing
  when: editorHasRenameProvider && editorTextFocus && !editorReadonly
- key: alt+f8
  command: -editor.action.marker.next
  when: editorFocus
- key: f8
  command: -editor.action.marker.nextInFiles
  when: editorFocus
- key: shift+alt+f8
  command: -editor.action.marker.prev
  when: editorFocus
- key: shift+f8
  command: -editor.action.marker.prevInFiles
  when: editorFocus
- key: ctrl+k ctrl+d
  command: -editor.action.moveSelectionToNextFindMatch
  when: editorFocus
- key: alt+f9
  command: -editor.action.nextCommentThreadAction
  when: editorFocus
- key: f3
  command: -editor.action.nextMatchFindAction
  when: editorFocus
- key: ctrl+f3
  command: -editor.action.nextSelectionMatchFindAction
  when: editorFocus
- key: shift+alt+o
  command: -editor.action.organizeImports
  when: textInputFocus && !editorReadonly && supportedCodeAction =~ /(\s|^)source\.organizeImports\b/
- key: ctrl+oem_4
  command: -editor.action.outdentLines
  when: editorTextFocus && !editorReadonly
- key: alt+f12
  command: -editor.action.peekDefinition
  when: editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor
- key: ctrl+shift+f12
  command: -editor.action.peekImplementation
  when: editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor
- key: shift+alt+f9
  command: -editor.action.previousCommentThreadAction
  when: editorFocus
- key: shift+f3
  command: -editor.action.previousMatchFindAction
  when: editorFocus
- key: ctrl+shift+f3
  command: -editor.action.previousSelectionMatchFindAction
  when: editorFocus
- key: ctrl+oem_period
  command: -editor.action.quickFix
  when: editorHasCodeActionsProvider && textInputFocus && !editorReadonly
- key: ctrl+k ctrl+u
  command: -editor.action.removeCommentLine
  when: editorTextFocus && !editorReadonly
- key: f2
  command: -editor.action.rename
  when: editorHasRenameProvider && editorTextFocus && !editorReadonly
- key: f12
  command: -editor.action.revealDefinition
  when: editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor
- key: ctrl+f12
  command: -editor.action.revealDefinition
  when: editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor
- key: ctrl+k f12
  command: -editor.action.revealDefinitionAside
  when: editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor
- key: ctrl+k ctrl+f12
  command: -editor.action.revealDefinitionAside
  when: editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor
- key: ctrl+k ctrl+k
  command: -editor.action.selectFromAnchorToCursor
  when: editorTextFocus && selectionAnchorSet
- key: ctrl+shift+l
  command: -editor.action.selectHighlights
  when: editorFocus
- key: ctrl+k ctrl+b
  command: -editor.action.setSelectionAnchor
  when: editorTextFocus
- key: shift+f10
  command: -editor.action.showContextMenu
  when: textInputFocus
- key: ctrl+k ctrl+i
  command: -editor.action.showHover
  when: editorTextFocus
- key: ctrl+h
  command: -editor.action.startFindReplaceAction
  when: editorFocus || editorIsOpen
- key: ctrl+m
  command: -editor.action.toggleTabFocusMode
- key: alt+z
  command: -editor.action.toggleWordWrap
- key: ctrl+i
  command: -editor.action.triggerSuggest
  when: editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible
- key: ctrl+k ctrl+x
  command: -editor.action.trimTrailingWhitespace
  when: editorTextFocus && !editorReadonly
- key: f7
  command: -editor.action.wordHighlight.next
  when: editorTextFocus && hasWordHighlights
- key: shift+f7
  command: -editor.action.wordHighlight.prev
  when: editorTextFocus && hasWordHighlights
- key: ctrl+oem_period
  command: -editor.changeDropType
  when: dropWidgetVisible
- key: ctrl+oem_period
  command: -editor.changePasteType
  when: pasteWidgetVisible
- key: ctrl+k ctrl+oem_comma
  command: -editor.createFoldingRangeFromSelection
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+i
  command: -editor.debug.action.showDebugHover
  when: editorTextFocus && inDebugMode
- key: f9
  command: -editor.debug.action.toggleBreakpoint
  when: debuggersAvailable && editorTextFocus
- key: ctrl+shift+oem_4
  command: -editor.fold
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+0
  command: -editor.foldAll
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+oem_2
  command: -editor.foldAllBlockComments
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+oem_minus
  command: -editor.foldAllExcept
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+8
  command: -editor.foldAllMarkerRegions
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+1
  command: -editor.foldLevel1
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+2
  command: -editor.foldLevel2
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+3
  command: -editor.foldLevel3
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+4
  command: -editor.foldLevel4
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+5
  command: -editor.foldLevel5
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+6
  command: -editor.foldLevel6
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+7
  command: -editor.foldLevel7
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+oem_4
  command: -editor.foldRecursively
  when: editorTextFocus && foldingEnabled
- key: f12
  command: -editor.gotoNextSymbolFromResult
  when: hasSymbols
- key: ctrl+k ctrl+oem_period
  command: -editor.removeManualFoldingRanges
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+l
  command: -editor.toggleFold
  when: editorTextFocus && foldingEnabled
- key: ctrl+shift+oem_6
  command: -editor.unfold
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+j
  command: -editor.unfoldAll
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+oem_plus
  command: -editor.unfoldAllExcept
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+9
  command: -editor.unfoldAllMarkerRegions
  when: editorTextFocus && foldingEnabled
- key: ctrl+k ctrl+oem_6
  command: -editor.unfoldRecursively
  when: editorTextFocus && foldingEnabled
- key: ctrl+shift+v
  command: -notebook.cell.pasteAbove
  when: notebookEditorFocused && !inputFocus
- key: shift+alt+f
  command: -notebook.formatCell
  when: editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'
- key: ctrl+shift+r
  command: -rerunSearchEditorSearch
  when: inSearchEditor
- key: ctrl+oem_2
  command: -toggleExplainMode
  when: suggestWidgetVisible
- key: ctrl+k f2
  command: -togglePeekWidgetFocus
  when: inReferenceSearchEditor || referenceSearchVisible
- key: alt+f5
  command: -workbench.action.editor.nextChange
  when: editorTextFocus && !textCompareEditorActive
- key: shift+alt+f5
  command: -workbench.action.editor.previousChange
  when: editorTextFocus && !textCompareEditorActive
- key: alt+f8
  command: -testing.goToNextMessage
  when: editorFocus && testing.isPeekVisible
- key: shift+alt+f8
  command: -testing.goToPreviousMessage
  when: editorFocus && testing.isPeekVisible
- key: ctrl+shift+1
  command: -editor.action.replaceOne
  when: editorFocus && findWidgetVisible
- key: alt+c
  command: -toggleFindCaseSensitive
  when: editorFocus
- key: alt+l
  command: -toggleFindInSelection
  when: editorFocus
- key: alt+r
  command: -toggleFindRegex
  when: editorFocus
- key: alt+w
  command: -toggleFindWholeWord
  when: editorFocus
- key: alt+p
  command: -togglePreserveCase
  when: editorFocus
- key: ctrl+i
  command: -focusSuggestion
  when: suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion
- key: ctrl+i
  command: -toggleSuggestionDetails
  when: suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus
- key: ctrl+shift+l
  command: -addCursorsAtSearchResults
  when: fileMatchOrMatchFocus && searchViewletVisible
- key: ctrl+shift+oem_1
  command: -breadcrumbs.focus
  when: breadcrumbsPossible && breadcrumbsVisible
- key: ctrl+shift+oem_period
  command: -breadcrumbs.focusAndSelect
  when: breadcrumbsPossible && breadcrumbsVisible
- key: ctrl+shift+oem_period
  command: -breadcrumbs.toggleToOn
  when: '!config.breadcrumbs.enabled'
- key: ctrl+shift+i
  command: -chat.action.askQuickQuestion
  when: hasChatProvider
- key: shift+alt+c
  command: -copyFilePath
  when: '!editorFocus'
- key: shift+alt+c
  command: -copyFilePath
  when: editorFocus
- key: ctrl+k ctrl+shift+c
  command: -copyRelativeFilePath
  when: '!editorFocus'
- key: ctrl+k ctrl+shift+c
  command: -copyRelativeFilePath
  when: editorFocus
- key: ctrl+f5
  command: -debug.openView
  when: '!debuggersAvailable'
- key: f5
  command: -debug.openView
  when: '!debuggersAvailable'
- key: alt+oem_minus
  command: -decreaseSearchEditorContextLines
  when: inSearchEditor
- key: alt+f1
  command: -editor.action.accessibilityHelp
- key: alt+f2
  command: -editor.action.accessibleView
- key: ctrl+k ctrl+k
  command: -editor.action.defineKeybinding
  when: resource == 'vscode-userdata:/c%3A/Users/jaid/AppData/Roaming/Code/User/keybindings.json'
- key: shift+f9
  command: -editor.debug.action.toggleInlineBreakpoint
  when: editorTextFocus
- key: shift+alt+d
  command: -editor.detectLanguage
  when: editorTextFocus && !notebookEditable
- key: shift+alt+h
  command: -editor.showCallHierarchy
  when: editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor
- key: shift+alt+h
  command: -editor.showIncomingCalls
  when: callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'
- key: shift+alt+h
  command: -editor.showOutgoingCalls
  when: callHierarchyVisible && callHierarchyDirection == 'incomingCalls'
- key: shift+alt+h
  command: -editor.showSubtypes
  when: typeHierarchyVisible && typeHierarchyDirection == 'supertypes'
- key: shift+alt+h
  command: -editor.showSupertypes
  when: typeHierarchyVisible && typeHierarchyDirection == 'subtypes'
- key: shift+alt+f
  command: -filesExplorer.findInFolder
  when: explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus
- key: alt+oem_plus
  command: -increaseSearchEditorContextLines
  when: inSearchEditor
- key: ctrl+k i
  command: -inlineChat.start
  when: inlineChatHasProvider && !editorReadonly
- key: ctrl+i
  command: -inlineChat.start
  when: inlineChatHasProvider && !editorReadonly
- key: ctrl+k ctrl+a
  command: -keybindings.editor.addKeybinding
  when: inKeybindings && keybindingFocus
- key: ctrl+k ctrl+e
  command: -keybindings.editor.defineWhenExpression
  when: inKeybindings && keybindingFocus
- key: alt+k
  command: -keybindings.editor.recordSearchKeys
  when: inKeybindings && inKeybindingsSearch
- key: alt+p
  command: -keybindings.editor.toggleSortByPrecedence
  when: inKeybindings
- key: f3
  command: -list.find
  when: listFocus && listSupportsFind
- key: y
  command: -notebook.cell.changeToCode
  when: notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'
- key: m
  command: -notebook.cell.changeToMarkdown
  when: notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'
- key: ctrl+k ctrl+c
  command: -notebook.cell.collapseCellInput
  when: notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed
- key: ctrl+k t
  command: -notebook.cell.collapseCellOutput
  when: notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed
- key: shift+alt+d
  command: -notebook.cell.detectLanguage
  when: notebookCellEditable && notebookEditable
- key: ctrl+k ctrl+c
  command: -notebook.cell.expandCellInput
  when: notebookCellInputIsCollapsed && notebookCellListFocused
- key: ctrl+k t
  command: -notebook.cell.expandCellOutput
  when: notebookCellListFocused && notebookCellOutputIsCollapsed
- key: shift+alt+win+j
  command: -notebook.cell.joinAbove
  when: notebookEditorFocused
- key: alt+win+j
  command: -notebook.cell.joinBelow
  when: notebookEditorFocused
- key: ctrl+k ctrl+shift+oem_5
  command: -notebook.cell.split
  when: editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused
- key: ctrl+k y
  command: -notebook.cell.toggleOutputScrolling
  when: notebookCellHasOutputs && notebookCellListFocused && !inputFocus
- key: ctrl+l
  command: -notebook.centerActiveCell
  when: notebookEditorFocused
- key: alt+f3
  command: -notebook.diff.action.next
  when: activeEditor == 'workbench.editor.notebookTextDiffEditor'
- key: shift+alt+f3
  command: -notebook.diff.action.previous
  when: activeEditor == 'workbench.editor.notebookTextDiffEditor'
- key: ctrl+shift+oem_4
  command: -notebook.fold
  when: notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'
- key: shift+alt+f
  command: -notebook.format
  when: notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'
- key: ctrl+shift+oem_6
  command: -notebook.unfold
  when: notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'
- key: ctrl+shift+a
  command: -notification.acceptPrimaryAction
  when: notificationToastsVisible
- key: ctrl+oem_period
  command: -problems.action.showQuickFixes
  when: problemFocus
- key: shift+alt+r
  command: -revealFileInOS
  when: '!editorFocus'
- key: ctrl+k s
  command: -saveAll
- key: shift+alt+c
  command: -search.action.copyPath
  when: fileMatchOrFolderMatchWithResourceFocus
- key: f4
  command: -search.action.focusNextSearchResult
  when: hasSearchResult || inSearchEditor
- key: shift+f4
  command: -search.action.focusPreviousSearchResult
  when: hasSearchResult || inSearchEditor
- key: ctrl+shift+1
  command: -search.action.replace
  when: isEditableItem && matchFocus && replaceActive && searchViewletVisible
- key: ctrl+shift+1
  command: -search.action.replaceAllInFile
  when: fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible
- key: ctrl+shift+1
  command: -search.action.replaceAllInFolder
  when: folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible
- key: shift+alt+f
  command: -search.action.restrictSearchToFolder
  when: folderMatchWithResourceFocus && searchViewletVisible
- key: ctrl+shift+l
  command: -selectAllSearchEditorMatches
  when: inSearchEditor
- key: shift+f9
  command: -settings.action.showContextMenu
  when: inSettingsEditor
- key: ctrl+oem_1 ctrl+x
  command: -testing.cancelRun
- key: ctrl+oem_1 ctrl+a
  command: -testing.debugAll
- key: ctrl+oem_1 ctrl+c
  command: -testing.debugAtCursor
  when: editorTextFocus
- key: ctrl+oem_1 ctrl+f
  command: -testing.debugCurrentFile
  when: editorTextFocus
- key: ctrl+oem_1 ctrl+e
  command: -testing.debugFailTests
- key: ctrl+oem_1 ctrl+l
  command: -testing.debugLastRun
- key: ctrl+oem_1 ctrl+m
  command: -testing.openOutputPeek
- key: ctrl+oem_1 e
  command: -testing.reRunFailTests
- key: ctrl+oem_1 l
  command: -testing.reRunLastRun
- key: ctrl+oem_1 ctrl+r
  command: -testing.refreshTests
  when: testing.canRefresh
- key: ctrl+oem_1 a
  command: -testing.runAll
- key: ctrl+oem_1 c
  command: -testing.runAtCursor
  when: editorTextFocus
- key: ctrl+oem_1 f
  command: -testing.runCurrentFile
  when: editorTextFocus
- key: ctrl+oem_1 ctrl+o
  command: -testing.showMostRecentOutput
  when: testing.hasAnyResults
- key: ctrl+oem_1 ctrl+i
  command: -testing.toggleInlineTestOutput
- key: alt+h
  command: -testing.toggleTestingPeekHistory
  when: testing.isPeekVisible
- key: alt+c
  command: -toggleSearchCaseSensitive
  when: searchViewletFocus
- key: alt+c
  command: -toggleSearchEditorCaseSensitive
  when: inSearchEditor && searchInputBoxFocus
- key: alt+l
  command: -toggleSearchEditorContextLines
  when: inSearchEditor
- key: alt+r
  command: -toggleSearchEditorRegex
  when: inSearchEditor && searchInputBoxFocus
- key: alt+w
  command: -toggleSearchEditorWholeWord
  when: inSearchEditor && searchInputBoxFocus
- key: alt+p
  command: -toggleSearchPreserveCase
  when: searchViewletFocus
- key: alt+r
  command: -toggleSearchRegex
  when: searchViewletFocus
- key: alt+w
  command: -toggleSearchWholeWord
  when: searchViewletFocus
- key: ctrl+alt+win+n
  command: -welcome.showNewFileEntries
- key: ctrl+l
  command: -workbench.action.chat.clear
  when: hasChatProvider && inChat
- key: f9
  command: -workbench.action.chat.nextCodeBlock
  when: hasChatProvider && inChat
- key: shift+f9
  command: -workbench.action.chat.previousCodeBlock
  when: hasChatProvider && inChat
- key: ctrl+f4
  command: -workbench.action.closeActiveEditor
- key: ctrl+k ctrl+w
  command: -workbench.action.closeAllEditors
- key: ctrl+k ctrl+shift+w
  command: -workbench.action.closeAllGroups
- key: ctrl+k w
  command: -workbench.action.closeEditorsInGroup
- key: ctrl+k f
  command: -workbench.action.closeFolder
  when: emptyWorkspaceSupport && workbenchState != 'empty'
- key: ctrl+f4
  command: -workbench.action.closeGroup
  when: activeEditorGroupEmpty && multipleEditorGroups
- key: ctrl+k u
  command: -workbench.action.closeUnmodifiedEditors
- key: ctrl+shift+w
  command: -workbench.action.closeWindow
- key: alt+f4
  command: -workbench.action.closeWindow
- key: alt+f5
  command: -workbench.action.compareEditor.nextChange
  when: textCompareEditorVisible
- key: ctrl+k shift+o
  command: -workbench.action.compareEditor.openSide
  when: inDiffEditor
- key: shift+alt+f5
  command: -workbench.action.compareEditor.previousChange
  when: textCompareEditorVisible
- key: shift+f5
  command: -workbench.action.debug.disconnect
  when: focusedSessionIsAttach && inDebugMode
- key: ctrl+shift+f5
  command: -workbench.action.debug.restart
  when: inDebugMode
- key: ctrl+f5
  command: -workbench.action.debug.run
  when: debuggersAvailable && debugState != 'initializing'
- key: f5
  command: -workbench.action.debug.start
  when: debuggersAvailable && debugState == 'inactive'
- key: ctrl+f11
  command: -workbench.action.debug.stepIntoTarget
  when: inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'
- key: shift+f11
  command: -workbench.action.debug.stepOut
  when: debugState == 'stopped'
- key: f10
  command: -workbench.action.debug.stepOver
  when: debugState == 'stopped'
- key: shift+f5
  command: -workbench.action.debug.stop
  when: inDebugMode && !focusedSessionIsAttach
- key: ctrl+k m
  command: -workbench.action.editor.changeLanguageMode
  when: '!notebookEditorFocused'
- key: ctrl+k p
  command: -workbench.action.files.copyPathOfActiveFile
- key: ctrl+n
  command: -workbench.action.files.newUntitledFile
- key: ctrl+o
  command: -workbench.action.files.openFile
  when: 'true'
- key: ctrl+o
  command: -workbench.action.files.openFileFolder
  when: isMacNative && openFolderWorkspaceSupport
- key: ctrl+k ctrl+o
  command: -workbench.action.files.openFolder
  when: openFolderWorkspaceSupport
- key: ctrl+o
  command: -workbench.action.files.openFolderViaWorkspace
  when: "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
- key: ctrl+o
  command: -workbench.action.files.openLocalFile
  when: remoteFileDialogVisible
- key: ctrl+k ctrl+o
  command: -workbench.action.files.openLocalFolder
  when: remoteFileDialogVisible
- key: ctrl+k r
  command: -workbench.action.files.revealActiveFileInWindows
- key: ctrl+s
  command: -workbench.action.files.save
- key: ctrl+shift+s
  command: -workbench.action.files.saveAs
- key: ctrl+shift+s
  command: -workbench.action.files.saveLocalFile
  when: remoteFileDialogVisible
- key: ctrl+k ctrl+shift+s
  command: -workbench.action.files.saveWithoutFormatting
- key: ctrl+k o
  command: -workbench.action.files.showOpenedFileInNewWindow
  when: emptyWorkspaceSupport
- key: ctrl+k ctrl+up
  command: -workbench.action.focusAboveGroup
- key: ctrl+k ctrl+down
  command: -workbench.action.focusBelowGroup
- key: ctrl+8
  command: -workbench.action.focusEighthEditorGroup
- key: ctrl+5
  command: -workbench.action.focusFifthEditorGroup
- key: ctrl+1
  command: -workbench.action.focusFirstEditorGroup
- key: ctrl+4
  command: -workbench.action.focusFourthEditorGroup
- key: ctrl+k ctrl+left
  command: -workbench.action.focusLeftGroup
- key: f6
  command: -workbench.action.focusNextPart
- key: shift+f6
  command: -workbench.action.focusPreviousPart
- key: ctrl+k ctrl+right
  command: -workbench.action.focusRightGroup
- key: ctrl+2
  command: -workbench.action.focusSecondEditorGroup
- key: ctrl+7
  command: -workbench.action.focusSeventhEditorGroup
- key: ctrl+0
  command: -workbench.action.focusSideBar
- key: ctrl+6
  command: -workbench.action.focusSixthEditorGroup
- key: ctrl+3
  command: -workbench.action.focusThirdEditorGroup
- key: ctrl+g
  command: -workbench.action.gotoLine
- key: ctrl+shift+o
  command: -workbench.action.gotoSymbol
- key: ctrl+k ctrl+shift+oem_5
  command: -workbench.action.joinEditorInGroup
  when: sideBySideEditorActive
- key: ctrl+k enter
  command: -workbench.action.keepEditor
- key: ctrl+k ctrl+r
  command: -workbench.action.keybindingsReference
- key: ctrl+9
  command: -workbench.action.lastEditorInGroup
- key: alt+0
  command: -workbench.action.lastEditorInGroup
- key: ctrl+k down
  command: -workbench.action.moveActiveEditorGroupDown
- key: ctrl+k left
  command: -workbench.action.moveActiveEditorGroupLeft
- key: ctrl+k right
  command: -workbench.action.moveActiveEditorGroupRight
- key: ctrl+k up
  command: -workbench.action.moveActiveEditorGroupUp
- key: shift+alt+1
  command: -workbench.action.moveEditorToFirstGroup
- key: shift+alt+9
  command: -workbench.action.moveEditorToLastGroup
- key: ctrl+k ctrl+q
  command: -workbench.action.navigateToLastEditLocation
- key: ctrl+shift+n
  command: -workbench.action.newWindow
- key: ctrl+k ctrl+pagedown
  command: -workbench.action.nextEditorInGroup
- key: alt+1
  command: -workbench.action.openEditorAtIndex1
- key: alt+2
  command: -workbench.action.openEditorAtIndex2
- key: alt+3
  command: -workbench.action.openEditorAtIndex3
- key: alt+4
  command: -workbench.action.openEditorAtIndex4
- key: alt+5
  command: -workbench.action.openEditorAtIndex5
- key: alt+6
  command: -workbench.action.openEditorAtIndex6
- key: alt+7
  command: -workbench.action.openEditorAtIndex7
- key: alt+8
  command: -workbench.action.openEditorAtIndex8
- key: alt+9
  command: -workbench.action.openEditorAtIndex9
- key: ctrl+k ctrl+s
  command: -workbench.action.openGlobalKeybindings
- key: ctrl+r
  command: -workbench.action.openRecent
- key: ctrl+oem_comma
  command: -workbench.action.openSettings
- key: ctrl+shift+u
  command: -workbench.action.output.toggleOutput
  when: workbench.panel.output.active
- key: ctrl+k shift+enter
  command: -workbench.action.pinEditor
  when: '!activeEditorIsPinned'
- key: ctrl+k ctrl+pageup
  command: -workbench.action.previousEditorInGroup
- key: ctrl+e
  command: -workbench.action.quickOpen
- key: ctrl+p
  command: -workbench.action.quickOpen
- key: ctrl+q
  command: -workbench.action.quickOpenView
- key: ctrl+alt+o
  command: -workbench.action.remote.showMenu
- key: ctrl+shift+t
  command: -workbench.action.reopenClosedEditor
- key: ctrl+shift+h
  command: -workbench.action.replaceInFiles
- key: ctrl+shift+j
  command: -workbench.action.search.toggleQueryDetails
  when: inSearchEditor || searchViewletFocus
- key: ctrl+k ctrl+t
  command: -workbench.action.selectTheme
- key: ctrl+k ctrl+p
  command: -workbench.action.showAllEditors
- key: ctrl+t
  command: -workbench.action.showAllSymbols
- key: f1
  command: -workbench.action.showCommands
- key: ctrl+shift+p
  command: -workbench.action.showCommands
- key: ctrl+k ctrl+i
  command: -workbench.action.showTreeHover
  when: customTreeView && listFocus && !inputFocus
- key: ctrl+oem_5
  command: -workbench.action.splitEditor
- key: ctrl+k ctrl+oem_5
  command: -workbench.action.splitEditorDown
- key: ctrl+k ctrl+shift+oem_5
  command: -workbench.action.splitEditorInGroup
  when: activeEditorCanSplitInGroup
- key: ctrl+k ctrl+oem_5
  command: -workbench.action.splitEditorLeft
- key: ctrl+k ctrl+oem_5
  command: -workbench.action.splitEditorOrthogonal
- key: ctrl+k ctrl+oem_5
  command: -workbench.action.splitEditorRight
- key: ctrl+k ctrl+oem_5
  command: -workbench.action.splitEditorUp
- key: ctrl+shift+b
  command: -workbench.action.tasks.build
  when: taskCommandsRegistered
- key: ctrl+shift+c
  command: -workbench.action.terminal.copySelection
  when: terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused
- key: f3
  command: -workbench.action.terminal.findNext
  when: terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported
- key: shift+f3
  command: -workbench.action.terminal.findPrevious
  when: terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported
- key: ctrl+k ctrl+i
  command: -workbench.action.terminal.focusHover
  when: terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus
- key: ctrl+shift+oem_5
  command: -workbench.action.terminal.focusTabs
  when: terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus
- key: ctrl+g
  command: -workbench.action.terminal.goToRecentDirectory
  when: terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported
- key: ctrl+f4
  command: -workbench.action.terminal.killEditor
  when: terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'
- key: ctrl+shift+oem_3
  command: -workbench.action.terminal.new
  when: terminalProcessSupported || terminalWebExtensionContributedProfile
- key: ctrl+shift+c
  command: -workbench.action.terminal.openNativeConsole
  when: '!terminalFocus'
- key: ctrl+shift+v
  command: -workbench.action.terminal.paste
  when: terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported
- key: f2
  command: -workbench.action.terminal.renameInstance
  when: terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection
- key: ctrl+r
  command: -workbench.action.terminal.runRecentCommand
  when: accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported
- key: ctrl+alt+r
  command: -workbench.action.terminal.runRecentCommand
  when: terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled
- key: ctrl+alt+r
  command: -workbench.action.terminal.sendSequence
  when: accessibilityModeEnabled && terminalFocus
  args:
    text: "\x12"
- key: ctrl+alt+g
  command: -workbench.action.terminal.sendSequence
  when: terminalFocus
  args:
    text: "\a"
- key: ctrl+shift+2
  command: -workbench.action.terminal.sendSequence
  when: terminalFocus
  args:
    text: "\0"
- key: ctrl+shift+6
  command: -workbench.action.terminal.sendSequence
  when: terminalFocus
  args:
    text: "\x1e"
- key: ctrl+oem_2
  command: -workbench.action.terminal.sendSequence
  when: terminalFocus
  args:
    text: "\x1f"
- key: ctrl+oem_period
  command: -workbench.action.terminal.showQuickFixes
  when: terminalFocus
- key: alt+z
  command: -workbench.action.terminal.sizeToContentWidth
  when: terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported
- key: ctrl+shift+5
  command: -workbench.action.terminal.split
  when: terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile
- key: ctrl+shift+5
  command: -workbench.action.terminal.splitInstance
  when: terminalProcessSupported && terminalTabsFocus
- key: alt+c
  command: -workbench.action.terminal.toggleFindCaseSensitive
  when: terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported
- key: alt+r
  command: -workbench.action.terminal.toggleFindRegex
  when: terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported
- key: alt+w
  command: -workbench.action.terminal.toggleFindWholeWord
  when: terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported
- key: ctrl+oem_3
  command: -workbench.action.terminal.toggleTerminal
  when: terminal.active
- key: ctrl+alt+b
  command: -workbench.action.toggleAuxiliaryBar
- key: shift+alt+0
  command: -workbench.action.toggleEditorGroupLayout
- key: f11
  command: -workbench.action.toggleFullScreen
  when: '!isIOS'
- key: ctrl+j
  command: -workbench.action.togglePanel
- key: ctrl+b
  command: -workbench.action.toggleSidebarVisibility
- key: ctrl+k z
  command: -workbench.action.toggleZenMode
- key: ctrl+k shift+enter
  command: -workbench.action.unpinEditor
  when: activeEditorIsPinned
- key: ctrl+numpad_add
  command: -workbench.action.zoomIn
- key: ctrl+shift+oem_plus
  command: -workbench.action.zoomIn
- key: ctrl+oem_plus
  command: -workbench.action.zoomIn
- key: ctrl+numpad_subtract
  command: -workbench.action.zoomOut
- key: ctrl+shift+oem_minus
  command: -workbench.action.zoomOut
- key: ctrl+oem_minus
  command: -workbench.action.zoomOut
- key: ctrl+numpad0
  command: -workbench.action.zoomReset
- key: ctrl+shift+m
  command: -workbench.actions.view.problems
  when: workbench.panel.markers.view.active
- key: ctrl+shift+y
  command: -workbench.debug.action.toggleRepl
  when: workbench.panel.repl.view.active
- key: ctrl+k c
  command: -workbench.files.action.compareWithClipboard
- key: ctrl+k d
  command: -workbench.files.action.compareWithSaved
- key: ctrl+k e
  command: -workbench.files.action.focusOpenEditorsView
  when: workbench.explorer.openEditorsView.active
- key: ctrl+shift+d
  command: -workbench.view.debug
  when: viewContainer.workbench.view.debug.enabled
- key: ctrl+shift+e
  command: -workbench.view.explorer
  when: viewContainer.workbench.view.explorer.enabled
- key: ctrl+shift+x
  command: -workbench.view.extensions
  when: viewContainer.workbench.view.extensions.enabled
- key: ctrl+shift+g
  command: -workbench.view.scm
  when: workbench.scm.active
- key: ctrl+k down
  command: -views.moveViewDown
  when: focusedView != ''
- key: ctrl+k left
  command: -views.moveViewLeft
  when: focusedView != ''
- key: ctrl+k right
  command: -views.moveViewRight
  when: focusedView != ''
- key: ctrl+k up
  command: -views.moveViewUp
  when: focusedView != ''
- key: ctrl+shift+o
  command: -workbench.action.terminal.openDetectedLink
  when: terminalFocus && terminalHasBeenCreated
- key: f6
  command: -workbench.action.debug.pause
  when: debugState == 'running'
- key: ctrl+shift+o
  command: -workbench.action.terminal.navigateAccessibleBuffer
  when: terminalAccessibleBufferFocus && terminalHasBeenCreated || terminalAccessibleBufferFocus && terminalProcessSupported
- key: f2
  command: -debug.renameWatchExpression
  when: watchExpressionsFocused
- key: f2
  command: -debug.setVariable
  when: variablesFocused
- key: ctrl+e
  command: -editor.action.toggleScreenReaderAccessibilityMode
  when: accessibilityHelpIsShown
- key: f2
  command: -remote.tunnel.label
  when: tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'
- key: f2
  command: -renameFile
  when: filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus
- key: f5
  command: -workbench.action.debug.continue
  when: debugState == 'stopped'
- key: f11
  command: -workbench.action.debug.stepInto
  when: debugState != 'inactive'
- key: ctrl+e
  command: -workbench.action.quickOpenNavigateNextInFilePicker
  when: inFilesPicker && inQuickOpen
- key: ctrl+p
  command: -workbench.action.quickOpenNavigateNextInFilePicker
  when: inFilesPicker && inQuickOpen
- key: ctrl+r
  command: -workbench.action.quickOpenNavigateNextInRecentFilesPicker
  when: inQuickOpen && inRecentFilesPicker
- key: ctrl+q
  command: -workbench.action.quickOpenNavigateNextInViewPicker
  when: inQuickOpen && inViewsPicker
- key: ctrl+shift+e
  command: -workbench.action.quickOpenNavigatePreviousInFilePicker
  when: inFilesPicker && inQuickOpen
- key: ctrl+shift+p
  command: -workbench.action.quickOpenNavigatePreviousInFilePicker
  when: inFilesPicker && inQuickOpen
- key: ctrl+shift+r
  command: -workbench.action.quickOpenNavigatePreviousInRecentFilesPicker
  when: inQuickOpen && inRecentFilesPicker
- key: ctrl+shift+q
  command: -workbench.action.quickOpenNavigatePreviousInViewPicker
  when: inQuickOpen && inViewsPicker
- key: ctrl+r
  command: -workbench.action.reloadWindow
  when: isDevelopment
- key: ctrl+shift+i
  command: -workbench.action.toggleDevTools
  when: isDevelopment
- key: f10
  command: -extension.node-debug.startWithStopOnEntry
  when: "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
- key: ctrl+k ctrl+alt+s
  command: -git.stageSelectedRanges
  when: isInDiffEditor && !operationInProgress
- key: ctrl+shift+v
  command: -markdown.showPreview
  when: "!notebookEditorFocused && editorLangId == 'markdown'"
- key: shift+alt+f12
  command: -references-view.findReferences
  when: editorHasReferenceProvider
- key: f11
  command: -extension.node-debug.startWithStopOnEntry
  when: "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'"
- key: ctrl+k ctrl+n
  command: -git.unstageSelectedRanges
  when: isInDiffEditor && !operationInProgress
- key: ctrl+k v
  command: -markdown.showPreviewToSide
  when: "!notebookEditorFocused && editorLangId == 'markdown'"
- key: f4
  command: -references-view.next
  when: reference-list.hasResult && references-view.canNavigate
- key: ctrl+k ctrl+r
  command: -git.revertSelectedRanges
  when: isInDiffEditor && !operationInProgress
- key: shift+f4
  command: -references-view.prev
  when: reference-list.hasResult && references-view.canNavigate
- key: shift+alt+h
  command: -references-view.showCallHierarchy
  when: editorHasCallHierarchyProvider
- key: ctrl+f5
  command: -ahk2.run
  when: "!editorHasSelection && editorLangId == 'ahk2' && resourceScheme == 'file'"
- key: ctrl+alt+n
  command: -code-runner.run
- key: ctrl+shift+alt+e
  command: -copilot-labs.use-brush-picker
  when: editorTextFocus
- key: ctrl+oem_7
  command: -editor.togglequotes
- key: alt+l alt+c
  command: -extension.liveServer.goOffline
  when: editorTextFocus
- key: shift+alt+b
  command: -extension.openInSpecifyBrowser
- key: ctrl+alt+v
  command: -extension.pasteImage
  when: editorTextFocus
- key: ctrl+m ctrl+r
  command: -extension.pgsql.runQuery
  when: editorTextFocus && editorLangId == 'sql'
- key: ctrl+alt+oem_plus
  command: -extension.profile.select
- key: alt+h
  command: -git.viewFileHistory
- key: ctrl+g
  command: -hexEditor.goToOffset
  when: activeCustomEditorId == 'hexEditor.hexedit'
- key: ctrl+shift+v
  command: -iliazeus.vscode-ansi.showPretty
  when: editorLangId == 'ansi'
- key: ctrl+b
  command: -markdown.extension.editing.toggleBold
  when: editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/
- key: ctrl+alt+s
  command: -mdb.runSelectedPlaygroundBlocks
  when: mdb.isPlayground
- key: f
  command: -notebook.find
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: ctrl+alt+o
  command: -openhab.basicUI
  when: resourceLangId == 'openhab'
- key: ctrl+shift+q
  command: -sqlite.runDocumentQuery
  when: editorLangId =~ /(sql|sqlite)/
- key: ctrl+alt+l
  command: -turboConsoleLog.displayLogMessage
- key: ctrl+alt+i
  command: -workbench.panel.chatSidebar.copilot
- key: ctrl+shift+alt+x
  command: -xmlTools.evaluateXPath
- key: ctrl+f5
  command: -ahk2.selection.run
  when: editorHasSelection && editorLangId == 'ahk2'
- key: ctrl+alt+k
  command: -code-runner.runCustomCommand
- key: alt+l alt+o
  command: -extension.liveServer.goOnline
  when: editorTextFocus
- key: alt+b
  command: -extension.openInDefaultBrowser
- key: ctrl+m ctrl+c
  command: -extension.pgsql.connect
  when: editorTextFocus && editorLangId == 'sql'
- key: ctrl+shift+0
  command: -extension.resetState
- key: ctrl+oem_2
  command: -github.copilot.acceptCursorPanelSolution
  when: github.copilot.activated && github.copilot.panelVisible
- key: ctrl+k v
  command: -iliazeus.vscode-ansi.showPrettyToSide
  when: editorLangId == 'ansi'
- key: k
  command: -list.focusUp
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: ctrl+i
  command: -markdown.extension.editing.toggleItalic
  when: editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/
- key: ctrl+alt+r
  command: -mdb.runAllPlaygroundBlocks
  when: mdb.isPlayground
- key: shift+alt+c
  command: -turboConsoleLog.commentAllLogMessages
- key: ctrl+shift+alt+b
  command: -xmlTools.formatAsXml
- key: ctrl+shift+f5
  command: -ahk2.compile
  when: editorLangId == 'ahk2' && resourceScheme == 'file'
- key: ctrl+alt+j
  command: -code-runner.runByLanguage
- key: ctrl+alt+a ctrl+alt+a
  command: -extension.gist.add
- key: ctrl+m ctrl+d
  command: -extension.pgsql.disconnect
  when: editorTextFocus && editorLangId == 'sql'
- key: alt+oem_4
  command: -github.copilot.previousPanelSolution
  when: github.copilot.activated && github.copilot.panelVisible
- key: j
  command: -list.focusDown
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: alt+s
  command: -markdown.extension.editing.toggleStrikethrough
  when: editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/
- key: ctrl+s
  command: -mdb.saveMongoDBDocument
  when: resourceScheme == 'VIEW_DOCUMENT_SCHEME'
- key: shift+alt+u
  command: -turboConsoleLog.uncommentAllLogMessages
- key: f5
  command: -ahk2.debug
  when: "!inDebugMode && editorLangId == 'ahk2' && resourceScheme == 'file'"
- key: ctrl+alt+m
  command: -code-runner.stop
- key: ctrl+alt+b
  command: -extension.gist.openInBrowser
- key: alt+oem_6
  command: -github.copilot.nextPanelSolution
  when: github.copilot.activated && github.copilot.panelVisible
- key: ctrl+shift+oem_6
  command: -markdown.extension.editing.toggleHeadingUp
  when: editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/
- key: a
  command: -notebook.cell.insertCodeCellAboveAndFocusContainer
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: shift+alt+d
  command: -turboConsoleLog.deleteAllLogMessages
- key: shift+f5
  command: -ahk2.debug.params
  when: editorLangId == 'ahk2' && resourceScheme == 'file'
- key: alt+oem_5
  command: -editor.action.inlineSuggest.trigger
  when: config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible
- key: ctrl+alt+o
  command: -extension.gist.open
- key: ctrl+shift+oem_4
  command: -markdown.extension.editing.toggleHeadingDown
  when: editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/
- key: b
  command: -notebook.cell.insertCodeCellBelowAndFocusContainer
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: ctrl+f1
  command: -ahk2.help
  when: editorLangId == 'ahk2'
- key: ctrl+m
  command: -markdown.extension.editing.toggleMath
  when: editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/
- key: d d
  command: -notebook.cell.delete
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: ctrl+f6
  command: -ahk2.stop
  when: ahk2:isRunning && editorLangId == 'ahk2'
- key: alt+oem_comma
  command: -gitlens.key.alt+,
  when: gitlens:key:,
- key: z
  command: -undo
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: alt+oem_period
  command: -gitlens.key.alt+.
  when: gitlens:key:.
- key: s
  command: -workbench.action.files.save
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: c
  command: -notebook.cell.copy
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: x
  command: -notebook.cell.cut
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: v
  command: -notebook.cell.paste
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: alt+oem_2
  command: -gitlens.gitCommands
  when: "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
- key: shift+l
  command: -notebook.toggleLineNumbers
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: ctrl+shift+g oem_2
  command: -gitlens.gitCommands
  when: "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
- key: o
  command: -notebook.cell.toggleOutputs
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: alt+b
  command: -gitlens.toggleFileBlame
  when: editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/
- key: l
  command: -notebook.cell.toggleLineNumbers
  when: notebookEditorFocused && !inputFocus && !notebookOutputInputFocused
- key: ctrl+shift+g b
  command: -gitlens.toggleFileBlame
  when: editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/
- key: ctrl+shift+oem_minus
  command: -notebook.cell.split
  when: editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputInputFocused
- key: shift+alt+b
  command: -gitlens.toggleCodeLens
  when: editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'
- key: ctrl+shift+g shift+b
  command: -gitlens.toggleCodeLens
  when: editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'
- key: ctrl+oem_6
  command: -markdown.extension.onIndentLines
  when: editorTextFocus && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/
- key: alt+h
  command: -gitlens.showQuickFileHistory
  when: "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
- key: ctrl+oem_4
  command: -markdown.extension.onOutdentLines
  when: editorTextFocus && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/
- key: ctrl+shift+g h
  command: -gitlens.showQuickFileHistory
  when: "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
- key: alt+c
  command: -markdown.extension.checkTaskList
  when: editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/
- key: shift+alt+h
  command: -gitlens.showQuickRepoHistory
  when: "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
- key: ctrl+shift+v
  command: -markdown.extension.closePreview
  when: markdownPreviewFocus
- key: ctrl+shift+g shift+h
  command: -gitlens.showQuickRepoHistory
  when: "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
- key: ctrl+k v
  command: -markdown.extension.closePreview
  when: markdownPreviewFocus
- key: alt+s
  command: -gitlens.showQuickRepoStatus
  when: "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
- key: ctrl+shift+g s
  command: -gitlens.showQuickRepoStatus
  when: "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
- key: alt+c
  command: -gitlens.showQuickCommitFileDetails
  when: editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'
- key: ctrl+shift+g c
  command: -gitlens.showQuickCommitFileDetails
  when: editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'
- key: alt+oem_comma
  command: -gitlens.diffWithPrevious
  when: editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/
- key: ctrl+shift+g oem_comma
  command: -gitlens.diffWithPrevious
  when: editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/
- key: alt+oem_comma
  command: -gitlens.diffWithPreviousInDiffLeft
  when: editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/
- key: ctrl+shift+g oem_comma
  command: -gitlens.diffWithPreviousInDiffLeft
  when: editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/
- key: alt+oem_comma
  command: -gitlens.diffWithPreviousInDiffRight
  when: editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/
- key: ctrl+shift+g oem_comma
  command: -gitlens.diffWithPreviousInDiffRight
  when: editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/
- key: alt+oem_period
  command: -gitlens.diffWithNext
  when: editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/
- key: ctrl+shift+g oem_period
  command: -gitlens.diffWithNext
  when: editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/
- key: alt+oem_period
  command: -gitlens.diffWithNextInDiffLeft
  when: editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/
- key: ctrl+shift+g oem_period
  command: -gitlens.diffWithNextInDiffLeft
  when: editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/
- key: alt+oem_period
  command: -gitlens.diffWithNextInDiffRight
  when: editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/
- key: ctrl+shift+g oem_period
  command: -gitlens.diffWithNextInDiffRight
  when: editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/
- key: shift+alt+oem_period
  command: -gitlens.diffWithWorking
  when: editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/
- key: ctrl+shift+g shift+oem_period
  command: -gitlens.diffWithWorking
  when: editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/
- key: shift+alt+oem_comma
  command: -gitlens.diffLineWithPrevious
  when: editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/
- key: ctrl+shift+g shift+oem_comma
  command: -gitlens.diffLineWithPrevious
  when: editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/
- key: ctrl+shift+g g
  command: -workbench.view.scm
  when: workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'
- key: ctrl+oem_period
  command: -acceptSelectedCodeAction
  when: codeActionMenuVisible